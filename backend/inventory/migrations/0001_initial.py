# Generated by Django 4.2 on 2025-03-26 14:28

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdjustmentReason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Short name for the reason (e.g., 'Cycle Count Discrepancy')", max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional longer description', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Inventory Adjustment Reason',
                'verbose_name_plural': 'Inventory Adjustment Reasons',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FulfillmentLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('location_type', models.CharField(choices=[('WAREHOUSE', 'Warehouse'), ('STORE', 'Retail Store'), ('FULFILLMENT_CENTER', 'Fulfillment Center')], max_length=50)),
                ('address_line_1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line_2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state_province', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country_code', models.CharField(blank=True, max_length=2, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Fulfillment Location',
                'verbose_name_plural': 'Fulfillment Locations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stock_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('reserved_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('non_saleable_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('on_order_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('in_transit_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('returned_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('hold_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('backorder_quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('low_stock_threshold', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_levels', to='inventory.fulfillmentlocation')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_levels', to='products.product')),
            ],
            options={
                'verbose_name_plural': 'Inventories',
                'ordering': ['product__name', 'location__name'],
            },
        ),
        migrations.CreateModel(
            name='SerializedInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(db_index=True, help_text='Unique serial number for this product unit', max_length=255)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('RESERVED', 'Reserved (Order Pending)'), ('SOLD', 'Sold (Shipped)'), ('IN_TRANSIT', 'In Transit (Transfer)'), ('RETURNED', 'Returned (Pending Inspection)'), ('DAMAGED', 'Damaged / Non-Saleable')], db_index=True, default='AVAILABLE', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Optional notes about this serial number (e.g., damage details)', null=True)),
                ('received_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('inventory_record', models.ForeignKey(blank=True, help_text='Link to the main Inventory record for this product/location', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='serial_numbers', to='inventory.inventory')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_serial_numbers', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='serial_numbers', to='inventory.fulfillmentlocation')),
                ('product', models.ForeignKey(limit_choices_to={'is_serialized': True}, on_delete=django.db.models.deletion.CASCADE, related_name='serial_numbers', to='products.product')),
            ],
            options={
                'verbose_name': 'Serialized Inventory Item',
                'verbose_name_plural': 'Serialized Inventory Items',
                'ordering': ['product__name', 'serial_number'],
            },
        ),
        migrations.CreateModel(
            name='Lot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_number', models.CharField(db_index=True, help_text='Identifier for the batch/lot', max_length=100)),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Quantity of this product from this lot at this location', validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('RESERVED', 'Reserved (Order Pending)'), ('EXPIRED', 'Expired'), ('QUARANTINE', 'In Quarantine'), ('DAMAGED', 'Damaged / Non-Saleable')], db_index=True, default='AVAILABLE', max_length=20)),
                ('expiry_date', models.DateField(blank=True, db_index=True, help_text='Expiry date for this lot, if applicable', null=True)),
                ('manufacturing_date', models.DateField(blank=True, help_text='Manufacturing date for this lot', null=True)),
                ('received_date', models.DateField(db_index=True, default=django.utils.timezone.now, help_text='Date this lot was received')),
                ('cost_price_per_unit', models.DecimalField(blank=True, decimal_places=2, help_text='Cost price per unit for this lot', max_digits=10, null=True)),
                ('notes', models.TextField(blank=True, help_text='Optional notes about this lot', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('inventory_record', models.ForeignKey(blank=True, help_text='Link to the main Inventory record for this product/location', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lots', to='inventory.inventory')),
                ('last_modified_by', models.ForeignKey(blank=True, help_text='User who last modified this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_lots', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lots', to='inventory.fulfillmentlocation')),
                ('product', models.ForeignKey(limit_choices_to={'is_lotted': True}, on_delete=django.db.models.deletion.CASCADE, related_name='lots', to='products.product')),
            ],
            options={
                'verbose_name': 'Inventory Lot/Batch',
                'verbose_name_plural': 'Inventory Lots/Batches',
                'ordering': ['product', 'location', 'received_date', 'expiry_date'],
            },
        ),
        migrations.CreateModel(
            name='InventoryAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjustment_type', models.CharField(choices=[('ADD', 'Addition'), ('SUB', 'Subtraction'), ('RES', 'Reservation'), ('REL_RES', 'Release Reservation'), ('NON_SALE', 'Mark Non-Saleable'), ('RECV_PO', 'Receive Purchase Order'), ('SHIP_ORD', 'Ship Sales Order'), ('RET_STOCK', 'Return to Stock'), ('RET_NON_SALE', 'Return to Non-Saleable'), ('HOLD', 'Place on Hold'), ('REL_HOLD', 'Release from Hold'), ('CYCLE', 'Cycle Count Adjustment'), ('INIT', 'Initial Stock Load')], max_length=20)),
                ('quantity_change', models.IntegerField(help_text='The change in quantity (positive for additions, negative for subtractions)')),
                ('notes', models.TextField(blank=True, help_text='Optional additional details for the adjustment', null=True)),
                ('new_stock_quantity', models.IntegerField(help_text='The stock_quantity AFTER this adjustment')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adjustments', to='inventory.inventory')),
                ('reason', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='adjustments', to='inventory.adjustmentreason')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the adjustment', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Inventory Adjustment',
                'verbose_name_plural': 'Inventory Adjustments',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='serializedinventory',
            index=models.Index(fields=['product', 'serial_number'], name='inventory_s_product_e1d844_idx'),
        ),
        migrations.AddIndex(
            model_name='serializedinventory',
            index=models.Index(fields=['status', 'location'], name='inventory_s_status_8c3059_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='serializedinventory',
            unique_together={('product', 'serial_number')},
        ),
        migrations.AddIndex(
            model_name='lot',
            index=models.Index(fields=['product', 'lot_number'], name='inventory_l_product_ac6cbe_idx'),
        ),
        migrations.AddIndex(
            model_name='lot',
            index=models.Index(fields=['status', 'location'], name='inventory_l_status_689ba4_idx'),
        ),
        migrations.AddIndex(
            model_name='lot',
            index=models.Index(fields=['expiry_date'], name='inventory_l_expiry__232401_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lot',
            unique_together={('product', 'location', 'lot_number')},
        ),
        migrations.AlterUniqueTogether(
            name='inventory',
            unique_together={('product', 'location')},
        ),
    ]
